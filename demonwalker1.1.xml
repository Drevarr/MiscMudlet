<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Exit the lift!</name>
			<script>if demonnic.autowalker.enabled then send("exit lift") end</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>Nothing happens, as the lift is already at the requested destination.</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>0</integer>
			</regexCodePropertyList>
		</Trigger>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>Debug</name>
			<script>if matches[2] then
  demonnic:listCategories()
else
  demonnic:toggleDebug()
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^debug(?: (list))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>debug categories</name>
			<script>if matches[2] then
  demonnic:watchCategory( matches[2] )
else
  demonnic:listCategories()
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^debugc(?: (.*))?$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Area Autowalker</name>
			<packageName></packageName>
			<script>--Once again, do not change this stuff. If you do, and it breaks, it's on you.

demonnic = demonnic or {}
demonnic.autowalker = demonnic.autowalker or {}
demonnic.autowalker.config = demonnic.autowalker.config or {}
if demonnic.autowalker.enabled == nil then
	demonnic.autowalker.enabled = false
end</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Debugging</name>
				<packageName></packageName>
				<script>--Adds debugging functionality 
demonnic.debug = demonnic.debug or {}
demonnic.debug.categories = demonnic.debug.categories or { }
if demonnic.debug.active == nil then demonnic.debug.active = false end
function demonnic:echo(msg)
 cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s", msg))
end

function demonnic:Debug(category,debugData)
   if category then
      if table.contains(demonnic.debug.categories, category) then
         if type(debugData) == "table" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
            display(debugData)
         elseif type(debugData) == "string" or type(debugData) == "number" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n" )
         else
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n" )
         end
      end
   else
      if type(debugData) == "table" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
         display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
      else
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
      end
   end
end

function demonnic:printDebug(category, debugData)
   if not demonnic.debug.active then return end
   demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
   if demonnic.debug.active then demonnic.debug.active = nil
   else demonnic.debug.active = true
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:watchCategory( category )
   if table.contains(demonnic.debug.categories, category) then
      for i,v in ipairs(demonnic.debug.categories) do
         if v == category then
            table.remove(demonnic.debug.categories, i)
         end
      end
      demonnic:echo("No longer watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.") 
   else
      table.insert(demonnic.debug.categories, category)
      demonnic:echo("Now watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.")
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:listCategories()
   if #demonnic.debug.categories &gt; 0 then
      demonnic:echo("You are currently watching the following categories:\n" .. table.concat(demonnic.debug.categories,", ") )
   else
      demonnic:echo("You are not watching any debugs.")
   end
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>configuration</name>
				<packageName></packageName>
				<script>demonnic.autowalker.config.returnToStart = true</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Code</name>
				<packageName></packageName>
				<script>function demonnic:findAndRemove(targetTable, item)
  table.remove(targetTable, table.index_of(targetTable,item))
end

function demonnic.autowalker:init(rooms)
  if rooms == nil then rooms = {} end
	if type(rooms) ~= "table" then
	  demonnic:echo("You tried to initialize the autowalker with an argument, and it was not a table of room ID numbers. Try again")
		return
	end
	
  if demonnic.autowalker.enabled then
	  demonnic:printDebug("walker", "We've been told to start, but the walker is already enabled. So we aren't doing squat.")
		return
	end
	demonnic:printDebug("walker", "Initializing area autowalker for IRE mudlet mapper")
  demonnic.autowalker.enabled = true
	demonnic:printDebug("walker", "Setting current room and starting room to.. you guess it, the current room.")
	local currentRoom = mmp.currentroom
	demonnic.autowalker.currentRoom = currentRoom
	demonnic.autowalker.startingRoom = currentRoom
	demonnic:printDebug("walker", "Getting the area")
	local area = getRoomArea(currentRoom)
	demonnic.autowalker.area = area
	if #rooms ~= 0 then
	  demonnic:printDebug("walker", "We were provided a list with items in it") 
	  area = getRoomArea(rooms[1]) 
	  demonnic.autowalker.area = area
		if table.contains(rooms, currentRoom) then demonnic:findAndRemove(rooms, currentRoom) end
		demonnic.autowalker.remainingRooms = table.deepcopy(rooms)
	else
	  demonnic:printDebug("walker", "Getting list of rooms in the area")
	  local areaRooms = getAreaRooms(area)
	  demonnic:printDebug("walker", "Removing our current room from the list of remaining rooms to visit.")
	  demonnic:findAndRemove(areaRooms, currentRoom)
	  demonnic.autowalker.remainingRooms = table.deepcopy(areaRooms)
	end
	demonnic:printDebug("walker", demonnic.autowalker.remainingRooms)
	demonnic.autowalker:registerEventHandlers()
	demonnic.printDebug("walker", "Now report back that we've arrived at our first room!")
	raiseEvent("demonwalker.arrived")
end

function demonnic.autowalker:stop()
  if not demonnic.autowalker.enabled then
	  demonnic:printDebug("walker", "We've been told to stop, but the walker is enabled. So we aren't doing squat.")
		return
	end
	demonnic:printDebug("walker", "Time to stop walking for one reason or another")
	demonnic:printDebug("walker", "Niling out currentRoom and remainingRooms, we don't need them any more")
	demonnic.autowalker.currentRoom = nil
	demonnic.autowalker.remainingRooms = nil
	demonnic:printDebug("walker", "Setting enabled to false")
	demonnic.autowalker.enabled = false
	demonnic.autowalker:removeEventHandlers()
	demonnic:printDebug("walker", "Returning to our starting room, if we have that set in the config.")
	if demonnic.autowalker.config.returnToStart then mmp.gotoRoom(demonnic.autowalker.startingRoom) end
end

function demonnic.autowalker:move()
  if not demonnic.autowalker.enabled then
	  demonnic:printDebug("walker", "We've been told to move, but the walker is disabled. So we aren't doing squat.")
		return
	end
  demonnic:printDebug("walker", "We have been told to move to the next room.")
	demonnic:printDebug("walker", "Let's find the closestRoom to use for our next movement")
	demonnic.autowalker.nextRoom = demonnic.autowalker:closestRoom()
  if demonnic.autowalker.nextRoom ~= "" then
	  demonnic:printDebug("walker", "We have a room: " .. demonnic.autowalker.nextRoom .. " so let's tell the mapper to move there.")
	  mmp.gotoRoom(demonnic.autowalker.nextRoom)
	else
	  demonnic:printDebug("walker", "Couldn't get a next room, stopping!")
		raiseEvent("demonwalker.stop")
	end
end

function demonnic.autowalker:arrived()
  if tonumber(mmp.currentroom) == tonumber(demonnic.autowalker.nextRoom) then
	  demonnic:printDebug("walker", "We have arrived, and it is the room we expected it to be. Excellent.")
		demonnic:printDebug("walker", "Setting our current room.")
		demonnic.autowalker.currentRoom = mmp.currentroom
		demonnic:printDebug("walker", "Removing the current room from the list of remaining rooms.")
		demonnic:findAndRemove(demonnic.autowalker.remainingRooms, mmp.currentroom)
		demonnic:printDebug("walker", "And let anyone listening know we've arrived")
		raiseEvent("demonwalker.arrived")
	else
	  demonnic:printDebug("walker", "Somehow, the mudlet mapper says we have arrived but it is not to the room we said to go to.")
	end
end

function demonnic.autowalker:failedPath()
  demonnic:printDebug("walker", "The speedwalk failed, remove the room we were trying to get to and try again")
  demonnic:findAndRemove(demonnic.autowalker.remainingRooms, demonnic.autowalker.nextRoom)
	demonnic.autowalker.currentRoom = mmp.currentroom
	raiseEvent("demonwalker.move")
end

function demonnic.autowalker:removeEventHandlers()
  demonnic:printDebug("walker", "We are removing our event handlers.")
  for _,handlerID in pairs(demonnic.autowalker.eventHandlers) do
	  killAnonymousEventHandler(handlerID)
	end
end

function demonnic.autowalker:registerEventHandlers()
  demonnic:printDebug("walker", "Setting up table to track our event handlers")
  demonnic.autowalker.eventHandlers = demonnic.autowalker.eventHandlers or {}
	demonnic:printDebug("walker", "Remove any stale event handlers that might exist")
	demonnic.autowalker:removeEventHandlers()
	demonnic:printDebug("walker", "And now register the handlers we need")
	demonnic.autowalker.eventHandlers.move = registerAnonymousEventHandler("demonwalker.move", demonnic.autowalker.move)
	demonnic.autowalker.eventHandlers.stop = registerAnonymousEventHandler("demonwalker.stop", demonnic.autowalker.stop)
	demonnic.autowalker.eventHandlers.arrived = registerAnonymousEventHandler("mmapper arrived", demonnic.autowalker.arrived)
	demonnic.autowalker.eventHandlers.failedPath = registerAnonymousEventHandler("mmapper failed path", demonnic.autowalker.failedPath)
end

function demonnic.autowalker:closestRoom()
  local roomID = ""
	local distance = 99999
	for _,v in ipairs(demonnic.autowalker.remainingRooms) do
	  getPath(demonnic.autowalker.currentRoom, v)
		if table.size(speedWalkDir) &lt; distance then
		  distance = table.size(speedWalkDir)
			roomID = v
		end
	end
	return roomID
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
